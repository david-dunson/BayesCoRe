hb = hb/sum(hb)
sum(abs(ha - hb))/2
}
computeKS<- function(a,b){
ks_test = ks.test(a,b,warning=FALSE)
ks_test$statistic
}
plotDistance<- function(x,main="", q =0.95){
plot(x,xlab="Vertex Index",ylab="Distance",main=main)
lines(x, col=((x>quantile(x, q)) +1), type="p")
}
getIndexOfLargeDistance<- function(x, q =0.95){
c(1:length(x))[x>quantile(x, q)]
}
get3Distances<- function(a,b){
tv<- sapply(c(1:n),function(i) computeTV(a[,i],b[,i]))
ws<- sapply(c(1:n),function(i)  wasserstein1d(a[,i],b[,i]))
ks<- sapply(c(1:n),function(i)  computeKS(a[,i],b[,i]))
list("TV"=tv,"WS"=ws,"KS"=ks)
}
degreeMat<- do.call("rbind",combinedDegreeList)
d1 =degreeMat[covariates$GENDER==1,]
d2 =degreeMat[covariates$GENDER==2,]
dist = get3Distances(d1,d2)
degreeMat<- do.call("rbind",combinedDegreeList)
d1 =degreeMat[covariates$GENDER==1,]
d2 =degreeMat[covariates$GENDER==2,]
dist = get3Distances(d1,d2, n = n/2)
computeTV<-function(a,b){
breaks = hist(c(a,b),breaks = 5,plot = F)$breaks
ha = hist(a,breaks=breaks,plot = F)$density
hb = hist(b,breaks=breaks,plot = F)$density
ha = ha/sum(ha)
hb = hb/sum(hb)
sum(abs(ha - hb))/2
}
computeKS<- function(a,b){
ks_test = ks.test(a,b,warning=FALSE)
ks_test$statistic
}
plotDistance<- function(x,main="", q =0.95){
plot(x,xlab="Vertex Index",ylab="Distance",main=main)
lines(x, col=((x>quantile(x, q)) +1), type="p")
}
getIndexOfLargeDistance<- function(x, q =0.95){
c(1:length(x))[x>quantile(x, q)]
}
get3Distances<- function(a,b, n =n){
tv<- sapply(c(1:n),function(i) computeTV(a[,i],b[,i]))
ws<- sapply(c(1:n),function(i)  wasserstein1d(a[,i],b[,i]))
ks<- sapply(c(1:n),function(i)  computeKS(a[,i],b[,i]))
list("TV"=tv,"WS"=ws,"KS"=ks)
}
degreeMat<- do.call("rbind",combinedDegreeList)
d1 =degreeMat[covariates$GENDER==1,]
d2 =degreeMat[covariates$GENDER==2,]
dist = get3Distances(d1,d2, n = n/2)
par(mfrow=c(1,3))
plotDistance(dist$TV, "Total Variation")
plotDistance(dist$WS, "Wasserstein")
plotDistance(dist$KS, "Kolmogorov-Smirnov")
computeTV<-function(a,b){
breaks = hist(c(a,b),breaks = 5,plot = F)$breaks
ha = hist(a,breaks=breaks,plot = F)$density
hb = hist(b,breaks=breaks,plot = F)$density
ha = ha/sum(ha)
hb = hb/sum(hb)
sum(abs(ha - hb))/2
}
computeKS<- function(a,b){
ks_test = ks.test(a,b,warning=FALSE)
ks_test$statistic
}
plotDistance<- function(x,main="", q =0.95){
plot(x,xlab="Vertex Pair Index",ylab="Distance",main=main)
lines(x, col=((x>quantile(x, q)) +1), type="p")
}
getIndexOfLargeDistance<- function(x, q =0.95){
c(1:length(x))[x>quantile(x, q)]
}
get3Distances<- function(a,b, n =n){
tv<- sapply(c(1:n),function(i) computeTV(a[,i],b[,i]))
ws<- sapply(c(1:n),function(i)  wasserstein1d(a[,i],b[,i]))
ks<- sapply(c(1:n),function(i)  computeKS(a[,i],b[,i]))
list("TV"=tv,"WS"=ws,"KS"=ks)
}
hemisphere = vertex.attributes(graphList[[1]])$hemisphere
combinedDegreeList = lapply(DegreeList, function(x)x[hemisphere=="L"] + x[hemisphere=="R"])
computeTV<-function(a,b){
breaks = hist(c(a,b),breaks = 5,plot = F)$breaks
ha = hist(a,breaks=breaks,plot = F)$density
hb = hist(b,breaks=breaks,plot = F)$density
ha = ha/sum(ha)
hb = hb/sum(hb)
sum(abs(ha - hb))/2
}
computeKS<- function(a,b){
ks_test = ks.test(a,b,warning=FALSE)
ks_test$statistic
}
plotDistance<- function(x,main="", q =0.95){
plot(x,xlab="Vertex Pair Index",ylab="Distance",main=main)
lines(x, col=((x>quantile(x, q)) +1), type="p")
}
getIndexOfLargeDistance<- function(x, q =0.95){
c(1:length(x))[x>quantile(x, q)]
}
get3Distances<- function(a,b, n =n){
tv<- sapply(c(1:n),function(i) computeTV(a[,i],b[,i]))
ws<- sapply(c(1:n),function(i)  wasserstein1d(a[,i],b[,i]))
ks<- sapply(c(1:n),function(i)  computeKS(a[,i],b[,i]))
list("TV"=tv,"WS"=ws,"KS"=ks)
}
degreeMat<- do.call("rbind",combinedDegreeList)
d1 =degreeMat[covariates$GENDER==1,]
d2 =degreeMat[covariates$GENDER==2,]
dist = get3Distances(d1,d2, n = n/2)
par(mfrow=c(1,3))
plotDistance(dist$TV, "Total Variation")
plotDistance(dist$WS, "Wasserstein")
plotDistance(dist$KS, "Kolmogorov-Smirnov")
getIndexOfLargeDistance(dist$TV)
getIndexOfLargeDistance(dist$WS)
degreeMat<- do.call("rbind",combinedDegreeList)
d1 =degreeMat[covariates$GENOTYPE==0,]
d2 =degreeMat[covariates$GENOTYPE==1,]
d3 =degreeMat[covariates$GENOTYPE==2,]
dist = get3Distances(d1,d2,n/2)
par(mfrow=c(1,3))
plotDistance(dist$TV, "Total Variation")
plotDistance(dist$WS, "Wasserstein")
plotDistance(dist$KS, "Kolmogorov-Smirnov")
ageGroups=  (covariates$AGE_WEEKS<=50)*1 + (covariates$AGE_WEEKS>61)*1 + (covariates$AGE_WEEKS>88)*1
ageGroups
ageGroups=  1 + (covariates$AGE_WEEKS>61)*1 + (covariates$AGE_WEEKS>88)*1
ageGroups
range(covariates$AGE_WEEKS[ageGroups==1])
range(covariates$AGE_WEEKS[ageGroups==2])
range(covariates$AGE_WEEKS[ageGroups==3])
image.plot
require('fields')
require('igraph')
require('ggplot2')
require('reshape')
require('lsr')
require('transport')
require('fields')
setwd("c:/Users/leo/git/ABadea/")
listGs<- list.files(path = "./graphml/", pattern = "*.graphml")
#read in covariates and graph list
#find those with common ids, sort by id
covariates<- read.csv("./covariates/predictors.csv",stringsAsFactors = F)
ids <- unlist( lapply(listGs,function(x)strtrim(x,6)))
common_id<- intersect(covariates$RUNNO , ids)
covariates <- covariates[covariates$RUNNO%in%common_id,]
covariates <- covariates[order(covariates$RUNNO),]
listGs<- listGs[ids%in%common_id]
listGs<- listGs[order(listGs)]
graphList<- lapply(listGs, function(x){
read.graph( file = paste("./graphml/",x,sep = ""),format = "graphml")
})
AdjacencyList<- lapply(graphList, function(x){
get.adjacency(x)
})
HemisphereList<- lapply(graphList, function(x){
get.vertex.attribute(x,name="hemisphere")
})
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
n = nrow(AdjacencyList[[1]])
m = length(AdjacencyList)
computeTV<-function(a,b){
breaks = hist(c(a,b),breaks = 5,plot = F)$breaks
ha = hist(a,breaks=breaks,plot = F)$density
hb = hist(b,breaks=breaks,plot = F)$density
ha = ha/sum(ha)
hb = hb/sum(hb)
sum(abs(ha - hb))/2
}
computeKS<- function(a,b){
ks_test = ks.test(a,b,warning=FALSE)
ks_test$statistic
}
plotDistance<- function(x,main="", q =0.95){
plot(x,xlab="Vertex Index",ylab="Distance",main=main)
lines(x, col=((x>quantile(x, q)) +1), type="p")
}
getIndexOfLargeDistance<- function(x, q =0.95){
c(1:length(x))[x>quantile(x, q)]
}
get3Distances<- function(a,b){
tv<- sapply(c(1:n),function(i) computeTV(a[,i],b[,i]))
ws<- sapply(c(1:n),function(i)  wasserstein1d(a[,i],b[,i]))
ks<- sapply(c(1:n),function(i)  computeKS(a[,i],b[,i]))
list("TV"=tv,"WS"=ws,"KS"=ks)
}
sliceMeans<- function(A){
B = matrix(c(A),nrow(A)*ncol(A),dim(A)[3])
matrix(rowMeans(B), nrow(A))
}
degreeMat<- do.call("rbind",DegreeList)
d0 =degreeMat[covariates$GENOTYPE==0,]
d1 =degreeMat[covariates$GENOTYPE==1,]
d2 =degreeMat[covariates$GENOTYPE==2,]
degreeMat<- do.call("rbind",DegreeList)
d0 =degreeMat[covariates$GENOTYPE==0,]
d1 =degreeMat[covariates$GENOTYPE==1,]
d2 =degreeMat[covariates$GENOTYPE==2,]
dist = get3Distances(d1,d2)
topVertex = getIndexOfLargeDistance(dist$WS)
tensorA = array(unlist(lapply(AdjacencyList,as.matrix)),c(n,n,m))
A1 = tensorA[,,covariates$GENOTYPE==1]
A2 = tensorA[,,covariates$GENOTYPE==2]
par(mfrow=c(1,2),las=2)
image.plot(sliceMeans(A1[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=1")
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
image.plot(sliceMeans(A2[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=2")
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
image.plot(sliceMeans(A1[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=1",col = heat.colors(10))
tensorA = array(unlist(lapply(AdjacencyList,as.matrix)),c(n,n,m))
A1M = tensorA[,,(covariates$GENOTYPE==1 & covariates$GENDER==2)]
A1F = tensorA[,,(covariates$GENOTYPE==1 & covariates$GENDER==1)]
A2M = tensorA[,,(covariates$GENOTYPE==2 & covariates$GENDER==2)]
A2F = tensorA[,,(covariates$GENOTYPE==2 & covariates$GENDER==1)]
par(mfrow=c(1,2),las=2)
image.plot(sliceMeans(A1F[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=1, Female",col = heat.colors(10))
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
image.plot(sliceMeans(A1M[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=1, Male",col = heat.colors(10))
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
image.plot(sliceMeans(A2F[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=2, Female",col = heat.colors(10))
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
image.plot(sliceMeans(A2M[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=2, Male",col = heat.colors(10))
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
tensorA = array(unlist(lapply(AdjacencyList,as.matrix)),c(n,n,m))
A1 = tensorA[,,covariates$GENOTYPE==1]
A2 = tensorA[,,covariates$GENOTYPE==2]
par(mfrow=c(1,2),las=2)
par(mar=c(5.1,4.1,4.1,2.1)
image.plot(sliceMeans(A1[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=1",col = heat.colors(10))
require("fields")
tensorA = array(unlist(lapply(AdjacencyList,as.matrix)),c(n,n,m))
A1 = tensorA[,,covariates$GENOTYPE==1]
A2 = tensorA[,,covariates$GENOTYPE==2]
par(mfrow=c(1,2),las=2)
par(mar=c(5.1,4.1,4.1,2.1)
image.plot(sliceMeans(A1[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=1",col = heat.colors(10))
par(mar=c(5.1,4.1,4.1,2.1))
image.plot(sliceMeans(A1[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=1",col = heat.colors(10))
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
tensorA = array(unlist(lapply(AdjacencyList,as.matrix)),c(n,n,m))
A1 = tensorA[,,covariates$GENOTYPE==1]
A2 = tensorA[,,covariates$GENOTYPE==2]
par(mfrow=c(1,2),las=2)
par(mar=c(5.1,4.1,4.1,2.1))
image.plot(sliceMeans(A1[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=1",col = heat.colors(10))
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
image.plot(sliceMeans(A2[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=2",col = heat.colors(10))
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
tensorA = array(unlist(lapply(AdjacencyList,as.matrix)),c(n,n,m))
A1 = tensorA[,,covariates$GENOTYPE==1]
A2 = tensorA[,,covariates$GENOTYPE==2]
par(mfrow=c(1,2),las=2)
par(mar=c(5.1,4.1,4.1,3.1))
image.plot(sliceMeans(A1[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=1",col = heat.colors(10))
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
image.plot(sliceMeans(A2[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=2",col = heat.colors(10))
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
tensorA = array(unlist(lapply(AdjacencyList,as.matrix)),c(n,n,m))
A1 = tensorA[,,covariates$GENOTYPE==1]
A2 = tensorA[,,covariates$GENOTYPE==2]
par(mfrow=c(1,2),las=2)
par(mar=c(5.1,4.1,4.1,10.1))
image.plot(sliceMeans(A1[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=1",col = heat.colors(10))
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
image.plot(sliceMeans(A2[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=2",col = heat.colors(10))
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
tensorA = array(unlist(lapply(AdjacencyList,as.matrix)),c(n,n,m))
A1 = tensorA[,,covariates$GENOTYPE==1]
A2 = tensorA[,,covariates$GENOTYPE==2]
par(mfrow=c(1,2),las=2)
par(mar=c(5.1,4.1,4.1,5.1))
image.plot(sliceMeans(A1[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=1",col = heat.colors(10))
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
image.plot(sliceMeans(A2[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=2",col = heat.colors(10))
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/',
echo=FALSE, warning=FALSE, message=FALSE)
require('igraph')
require('ggplot2')
require('reshape')
require('lsr')
require('transport')
require('fields')
setwd("c:/Users/leo/git/ABadea/")
listGs<- list.files(path = "./graphml/", pattern = "*.graphml")
#read in covariates and graph list
#find those with common ids, sort by id
covariates<- read.csv("./covariates/predictors.csv",stringsAsFactors = F)
ids <- unlist( lapply(listGs,function(x)strtrim(x,6)))
common_id<- intersect(covariates$RUNNO , ids)
covariates <- covariates[covariates$RUNNO%in%common_id,]
covariates <- covariates[order(covariates$RUNNO),]
listGs<- listGs[ids%in%common_id]
listGs<- listGs[order(listGs)]
graphList<- lapply(listGs, function(x){
read.graph( file = paste("./graphml/",x,sep = ""),format = "graphml")
})
AdjacencyList<- lapply(graphList, function(x){
get.adjacency(x)
})
HemisphereList<- lapply(graphList, function(x){
get.vertex.attribute(x,name="hemisphere")
})
DegreeList<- lapply(AdjacencyList, function(x){
rowSums(as.matrix(x))
})
n = nrow(AdjacencyList[[1]])
m = length(AdjacencyList)
computeTV<-function(a,b){
breaks = hist(c(a,b),breaks = 5,plot = F)$breaks
ha = hist(a,breaks=breaks,plot = F)$density
hb = hist(b,breaks=breaks,plot = F)$density
ha = ha/sum(ha)
hb = hb/sum(hb)
sum(abs(ha - hb))/2
}
computeKS<- function(a,b){
ks_test = ks.test(a,b,warning=FALSE)
ks_test$statistic
}
plotDistance<- function(x,main="", q =0.95){
plot(x,xlab="Vertex Index",ylab="Distance",main=main)
lines(x, col=((x>quantile(x, q)) +1), type="p")
}
getIndexOfLargeDistance<- function(x, q =0.95){
c(1:length(x))[x>quantile(x, q)]
}
get3Distances<- function(a,b){
tv<- sapply(c(1:n),function(i) computeTV(a[,i],b[,i]))
ws<- sapply(c(1:n),function(i)  wasserstein1d(a[,i],b[,i]))
ks<- sapply(c(1:n),function(i)  computeKS(a[,i],b[,i]))
list("TV"=tv,"WS"=ws,"KS"=ks)
}
sliceMeans<- function(A){
B = matrix(c(A),nrow(A)*ncol(A),dim(A)[3])
matrix(rowMeans(B), nrow(A))
}
computeTV<-function(a,b){
breaks = hist(c(a,b),breaks = 5,plot = F)$breaks
ha = hist(a,breaks=breaks,plot = F)$density
hb = hist(b,breaks=breaks,plot = F)$density
ha = ha/sum(ha)
hb = hb/sum(hb)
sum(abs(ha - hb))/2
}
computeKS<- function(a,b){
ks_test = ks.test(a,b,warning=FALSE)
ks_test$statistic
}
plotDistance<- function(x,main="", q =0.95){
plot(x,xlab="Vertex Index",ylab="Distance",main=main)
lines(x, col=((x>quantile(x, q)) +1), type="p")
}
getIndexOfLargeDistance<- function(x, q =0.95){
c(1:length(x))[x>quantile(x, q)]
}
get3Distances<- function(a,b, n=n){
tv<- sapply(c(1:n),function(i) computeTV(a[,i],b[,i]))
ws<- sapply(c(1:n),function(i)  wasserstein1d(a[,i],b[,i]))
ks<- sapply(c(1:n),function(i)  computeKS(a[,i],b[,i]))
list("TV"=tv,"WS"=ws,"KS"=ks)
}
sliceMeans<- function(A){
B = matrix(c(A),nrow(A)*ncol(A),dim(A)[3])
matrix(rowMeans(B), nrow(A))
}
hemisphere = vertex.attributes(graphList[[1]])$hemisphere
combinedDegreeList = lapply(DegreeList, function(x)x[hemisphere=="L"] + x[hemisphere=="R"])
degreeMat<- do.call("rbind",combinedDegreeList)
d0 =degreeMat[covariates$GENOTYPE==0,]
d1 =degreeMat[covariates$GENOTYPE==1,]
d2 =degreeMat[covariates$GENOTYPE==2,]
dist = get3Distances(d1,d2,n/2)
topVertex = getIndexOfLargeDistance(dist$WS)
dist = get3Distances(d1,d2,n/2)
topVertex = getIndexOfLargeDistance(dist$WS)
topVertex = c(topVertex*2-1, topVertex*2)
tensorA = array(unlist(lapply(AdjacencyList,as.matrix)),c(n,n,m))
A1 = tensorA[,,covariates$GENOTYPE==1]
A2 = tensorA[,,covariates$GENOTYPE==2]
par(mfrow=c(1,2),las=2)
image(sliceMeans(A1[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=1")
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
image(sliceMeans(A2[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=2")
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
par(mfrow=c(1,1),las=2)
image.plot(sliceMeans(A1[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=1",col=heat.colors(10))
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
tensorA = array(unlist(lapply(AdjacencyList,as.matrix)),c(n,n,m))
A1M = tensorA[,,(covariates$GENOTYPE==1 & covariates$GENDER==2)]
A1F = tensorA[,,(covariates$GENOTYPE==1 & covariates$GENDER==1)]
A2M = tensorA[,,(covariates$GENOTYPE==2 & covariates$GENDER==2)]
A2F = tensorA[,,(covariates$GENOTYPE==2 & covariates$GENDER==1)]
par(mfrow=c(1,2),las=2)
image(sliceMeans(A1F[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=1, Female")
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
image(sliceMeans(A1M[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=1, Male")
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
image(sliceMeans(A2F[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=2, Female")
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
image(sliceMeans(A2M[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Genotype=2, Male")
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
covariates_geno12 = covariates[covariates$GENOTYPE!=0,]
covariates_geno12$GENOTYPE = sapply(covariates_geno12$GENOTYPE, function(x)paste("GENOTYPE=",x))
covariates_geno12$GENDER = sapply(covariates_geno12$GENDER, function(x)paste("SEX=",x))
table(covariates_geno12$GENOTYPE,covariates_geno12$GENDER)
tensorA = array(unlist(lapply(AdjacencyList,as.matrix)),c(n,n,m))
AM = tensorA[,,(covariates$GENOTYPE==1 & covariates$GENDER==2)]
AF = tensorA[,,(covariates$GENOTYPE==1 & covariates$GENDER==1)]
par(mfrow=c(1,2),las=2)
image(sliceMeans(AF[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Female")
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
image(sliceMeans(AM[topVertex,topVertex,]),zlim=c(0,1), axes=F,main="Male")
axis(1,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex )
axis(2,at=seq(0, 1, length.out = length(topVertex)),labels = topVertex)
medianDegree = round(sapply(c(1:m),function(x) median(DegreeList[[x]][topVertex])))
medianDegree = medianDegree[covariates$GENOTYPE!=0]
lm_fit = lm( medianDegree~ as.factor(covariates_geno12$GENDER) +as.factor(covariates_geno12$GENOTYPE) + (covariates_geno12$AGE_WEEKS))
summary(lm_fit)
1750/30
1750/30*3
1750/30*3
1750*12
topVertex
dist = get3Distances(d1,d2,n/2)
topVertexPair = getIndexOfLargeDistance(dist$WS)
topVertex = c(topVertexPair*2-1, topVertexPair*2)
medianDegree = round(sapply(c(1:m),function(x) median(combinedDegreeList[[x]][topVertexPair])))
medianDegree = medianDegree[covariates$GENOTYPE!=0]
lm_fit = lm( medianDegree~ as.factor(covariates_geno12$GENDER) +as.factor(covariates_geno12$GENOTYPE) + (covariates_geno12$AGE_WEEKS))
summary(lm_fit)
setwd("C:/Users/leo/git/empiricalTensor/test/")
require("rstan")
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
ss_model = stan_model(file= "dp_mixture.stan")
extractPosterior<-function(varname, dimen, stan_fit){
if(dimen==1){
eval(parse(text=paste(stan_fit,"@sim$samples[[1]]$`",varname,"`",sep="")))
}else{
sapply(c(1:dimen), function(i)  eval(parse(text=paste(stan_fit,"@sim$samples[[1]]$`",varname,"[",i, "]`",sep=""))))
}
}
N = 100
d=4;
p = c(0.1,0.2,0.7)
mu<- c(1,2,5)
sigma=0.5
y<- numeric(N)
alpha =0.5
for(i in 1:N){
y[i] = rnorm(1, sum(rmultinom(1,1,p)*mu),sigma)
}
lambda=1E5
toy_dat <- list(N=N, d=d,y=y, alpha=alpha, lambda=lambda)
init<- list(list(p= rep(1/d,d), mu=rnorm(d),sigma=1))
ss_fit <- sampling(ss_model, data = toy_dat,init=init, iter = 20000, chains = 1)
post_p<- extractPosterior("p", d,"ss_fit")
ts.plot(post_p)
d=10;
p = c(0.1,0.2,0.7)
mu<- c(1,2,5)
sigma=0.5
y<- numeric(N)
alpha =0.5
for(i in 1:N){
y[i] = rnorm(1, sum(rmultinom(1,1,p)*mu),sigma)
}
lambda=1E5
toy_dat <- list(N=N, d=d,y=y, alpha=alpha, lambda=lambda)
init<- list(list(p= rep(1/d,d), mu=rnorm(d),sigma=1))
ss_fit <- sampling(ss_model, data = toy_dat,init=init, iter = 20000, chains = 1)
ts.plot(post_mu[10000:20000,c(3,4)])
post_mu<- extractPosterior("mu", d,"ss_fit")
ts.plot(post_mu[10000:20000,c(3,4)])
post_sigma<- extractPosterior("sigma", 1,"ss_fit")
ts.plot(post_sigma)
post_sigma<- extractPosterior("sigma", 1,"ss_fit")
ts.plot(post_sigma)
