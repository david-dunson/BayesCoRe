setwd("~/git/empiricalTensor/gplvm/")
n= 50
r = 50
p = 3
Sigma = rep(0.01, p)
w = seq(0,pi,length.out = r+1)
w = w[-r]
x<- runif(n)
x[1]=0
spec<- function(rho, phi){
# phi*exp(-1/4 * rho^2 * w^2)
phi /(1+ rho^2 * w^2)
}
g = spec(1,10)
min(g)
g_theta = rep(g,2)
theta = matrix( rnorm(2*r*p)*sqrt(g_theta), 2*r)
xw = outer(x,w,"*")
C = cbind( cos(xw), sin(xw))
deriC = t(t(cbind( -sin(xw), cos(xw)))*w)
10000 * (deriC%*%theta<0)
Y = C%*%theta + matrix(rnorm(n*p),n)%*%diag(sqrt(Sigma),p)
plot(x,Y[,3])
plot(c(0,1),range(Y),type="n")
for(i in 1:p)lines(x[order(x)],Y[order(x),i])
source("./gplvm_hmc.r")
x1<- runif(n)
x1[1]=0
runX = updateX(x=x1,L = 10,steps = 2000, tuning = T,ideal_AR = 0.8)
runX$eps
runX = updateX(x=runX$x,eps = runX$eps,L = 10,steps = 2000, tuning = F)
computeU(x,theta,Sigma)
computeU(runX$x,theta,Sigma)
# setwd("c:/Users/leo/git/empiricalTensor/gplvm/")
setwd("~/git/empiricalTensor/gplvm/")
n= 50
r = 50
p = 3
Sigma = rep(0.01, p)
w = seq(0,pi,length.out = r+1)
w = w[-r]
x<- runif(n)
# x<- c(1:n)
x[1]=0
spec<- function(rho, phi){
# phi*exp(-1/4 * rho^2 * w^2)
phi /(1+ rho^2 * w^2)
}
g = spec(1,10)
min(g)
g_theta = rep(g,2)
theta = matrix( rnorm(2*r*p)*sqrt(g_theta), 2*r)
# theta[,1] = abs(theta[,1])
xw = outer(x,w,"*")
C = cbind( cos(xw), sin(xw))
deriC = t(t(cbind( -sin(xw), cos(xw)))*w)
10000 * (deriC%*%theta<0)
Y = C%*%theta + matrix(rnorm(n*p),n)%*%diag(sqrt(Sigma),p)
plot(c(0,1),range(Y),type="n")
for(i in 1:p)lines(x[order(x)],Y[order(x),i])
# setwd("c:/Users/leo/git/empiricalTensor/gplvm/")
setwd("~/git/empiricalTensor/gplvm/")
n= 50
r = 50
p = 3
Sigma = rep(0.01, p)
w = seq(0,pi,length.out = r+1)
w = w[-r]
x<- runif(n)
# x<- c(1:n)
x[1]=0
spec<- function(rho, phi){
# phi*exp(-1/4 * rho^2 * w^2)
phi /(1+ rho^2 * w^2)
}
g = spec(1,10)
min(g)
g_theta = rep(g,2)
theta = matrix( rnorm(2*r*p)*sqrt(g_theta), 2*r)
# theta[,1] = abs(theta[,1])
xw = outer(x,w,"*")
C = cbind( cos(xw), sin(xw))
deriC = t(t(cbind( -sin(xw), cos(xw)))*w)
10000 * (deriC%*%theta<0)
Y = C%*%theta + matrix(rnorm(n*p),n)%*%diag(sqrt(Sigma),p)
plot(c(0,1),range(Y),type="n")
for(i in 1:p)lines(x[order(x)],Y[order(x),i])
# setwd("c:/Users/leo/git/empiricalTensor/gplvm/")
setwd("~/git/empiricalTensor/gplvm/")
n= 50
r = 50
p = 3
Sigma = rep(0.01, p)
w = seq(0,pi,length.out = r+1)
w = w[-r]
x<- runif(n)
# x<- c(1:n)
x[1]=0
spec<- function(rho, phi){
# phi*exp(-1/4 * rho^2 * w^2)
phi /(1+ rho^2 * w^2)
}
g = spec(1,10)
min(g)
g_theta = rep(g,2)
theta = matrix( rnorm(2*r*p)*sqrt(g_theta), 2*r)
# theta[,1] = abs(theta[,1])
xw = outer(x,w,"*")
C = cbind( cos(xw), sin(xw))
deriC = t(t(cbind( -sin(xw), cos(xw)))*w)
10000 * (deriC%*%theta<0)
Y = C%*%theta + matrix(rnorm(n*p),n)%*%diag(sqrt(Sigma),p)
plot(c(0,1),range(Y),type="n")
for(i in 1:p)lines(x[order(x)],Y[order(x),i])
# setwd("c:/Users/leo/git/empiricalTensor/gplvm/")
setwd("~/git/empiricalTensor/gplvm/")
n= 50
r = 50
p = 3
Sigma = rep(0.01, p)
w = seq(0,pi,length.out = r+1)
w = w[-r]
x<- runif(n)
# x<- c(1:n)
x[1]=0
spec<- function(rho, phi){
# phi*exp(-1/4 * rho^2 * w^2)
phi /(1+ rho^2 * w^2)
}
g = spec(1,10)
min(g)
g_theta = rep(g,2)
theta = matrix( rnorm(2*r*p)*sqrt(g_theta), 2*r)
# theta[,1] = abs(theta[,1])
xw = outer(x,w,"*")
C = cbind( cos(xw), sin(xw))
deriC = t(t(cbind( -sin(xw), cos(xw)))*w)
10000 * (deriC%*%theta<0)
Y = C%*%theta + matrix(rnorm(n*p),n)%*%diag(sqrt(Sigma),p)
plot(c(0,1),range(Y),type="n")
for(i in 1:p)lines(x[order(x)],Y[order(x),i])
# setwd("c:/Users/leo/git/empiricalTensor/gplvm/")
setwd("~/git/empiricalTensor/gplvm/")
n= 50
r = 50
p = 3
Sigma = rep(0.01, p)
w = seq(0,pi,length.out = r+1)
w = w[-r]
x<- runif(n)
# x<- c(1:n)
x[1]=0
spec<- function(rho, phi){
# phi*exp(-1/4 * rho^2 * w^2)
phi /(1+ rho^2 * w^2)
}
g = spec(1,10)
min(g)
g_theta = rep(g,2)
theta = matrix( rnorm(2*r*p)*sqrt(g_theta), 2*r)
# theta[,1] = abs(theta[,1])
xw = outer(x,w,"*")
C = cbind( cos(xw), sin(xw))
deriC = t(t(cbind( -sin(xw), cos(xw)))*w)
10000 * (deriC%*%theta<0)
Y = C%*%theta + matrix(rnorm(n*p),n)%*%diag(sqrt(Sigma),p)
plot(c(0,1),range(Y),type="n")
for(i in 1:p)lines(x[order(x)],Y[order(x),i])
runX = updateX(x=x1,L = 10,steps = 2000, tuning = T,ideal_AR = 0.8)
runX = updateX(x=runX$x,eps = runX$eps,L = 10,steps = 2000, tuning = F)
runX = updateX(x=runX$x,eps = runX$eps,L = 10,steps = 2000, tuning = F,burnin = F)
runX = updateX(x=runX$x,eps = runX$eps,L = 10,steps = 2000, tuning = F,burnin = F)
plot(runX$x,Y[,2])
plot(runX$x,Y[,3])
runX = updateX(x=x,L = 1,steps = 2000, tuning = T,ideal_AR = 0.8)
plot(c(0,1),range(Y),type="n")
for(i in 1:p)lines(x[order(x)],Y[order(x),i])
for(i in 1:p)lines(runX$x[order(runX$x)],Y[order(runX$x),i],col="red")
computeU(x,theta,Sigma)
computeU(runX$x,theta,Sigma)
plot(x)
