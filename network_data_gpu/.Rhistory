b<- 2
x = matrix( c(1:n)/n* (b-a) + a, n ,p) - (b-a)/n/2
outer_exp<- function(x,y){
c(outer( x,y,function(a,b){ a*f(b)}))
}
Riemann<- 1
for(i in 1:ncol(x)){
Riemann<- outer_exp(Riemann, x[,i])
}
# mean(Riemann)
approx <- sum(Riemann)/(n)^p
true <- (F(b)-F(a))^p #(exp(2)-exp(1))^p
# (1^4/4-0)^p
(approx-true)/true
}
Riemann_test(2,1)
f<-function(x){
x^2
}
F<-function(x){
x^3/3
}
#integrated over (0,1)^4
# = exp(x)*exp(y) *exp(z) *(e-1)
# = (e-1)^4
Riemann_test<-function(n,p){
a<- 1
b<- 2
x = matrix( c(1:n)/n* (b-a) + a, n ,p) - (b-a)/n/2
outer_exp<- function(x,y){
c(outer( x,y,function(a,b){ a*f(b)}))
}
Riemann<- 1
for(i in 1:ncol(x)){
Riemann<- outer_exp(Riemann, x[,i])
}
# mean(Riemann)
approx <- sum(Riemann)/(n)^p
true <- (F(b)-F(a))^p #(exp(2)-exp(1))^p
# (1^4/4-0)^p
(approx-true)/true
}
Riemann_test(2,1)
Riemann_test(2,10)
x
Riemann_test(2,1)
Riemann_test(2,5)
Riemann_test(2,12)
Riemann_test(3,5)
Riemann_test(2,5)
Riemann_test(10,5)
f<-function(x){
x^2
}
F<-function(x){
x^3/3
}
#integrated over (0,1)^4
# = exp(x)*exp(y) *exp(z) *(e-1)
# = (e-1)^4
Riemann_test<-function(n,p){
a<- 1
b<- 2
x = matrix( c(1:n)/n* (b-a) + a, n ,p) - (b-a)/n/2
outer_exp<- function(x,y){
c(outer( x,y,function(a,b){ a*f(b)}))
}
Riemann<- 1
for(i in 1:ncol(x)){
Riemann<- outer_exp(Riemann, x[,i])
}
# mean(Riemann)
approx <- sum(Riemann)/(n)^p
true <- (F(b)-F(a))^p #(exp(2)-exp(1))^p
# (1^4/4-0)^p
abs((approx-true)/true)
}
Riemann_test(3,5)
Riemann_test(10,5)
f<-function(x){
x^2
}
F<-function(x){
x^3/3
}
#integrated over (0,1)^4
# = exp(x)*exp(y) *exp(z) *(e-1)
# = (e-1)^4
Riemann_test<-function(n,p){
a<- 1
b<- 2
x = matrix( c(1:n)/n* (b-a) + a, n ,p) - (b-a)/n/2
outer_exp<- function(x,y){
c(outer( x,y,function(a,b){ a*f(b)}))
}
Riemann<- 1
for(i in 1:ncol(x)){
Riemann<- outer_exp(Riemann, x[,i])
}
# mean(Riemann)
approx <- sum(Riemann)/(n)^p
true <- (F(b)-F(a))^p #(exp(2)-exp(1))^p
# (1^4/4-0)^p
abs((approx-true)/true)
}
Riemann_test(2,5)
Riemann_test(2,10)
Riemann_test(2,15)
f<-function(x){
x^2
}
F<-function(x){
x^3/3
}
#integrated over (0,1)^4
# = exp(x)*exp(y) *exp(z) *(e-1)
# = (e-1)^4
Riemann_test<-function(n,p){
a<- 1
b<- 2
x = matrix( c(1:n)/n* (b-a) + a, n ,p) - (b-a)/n/2
outer_exp<- function(x,y){
c(outer( x,y,function(a,b){ a*f(b)}))
}
Riemann<- 1
for(i in 1:ncol(x)){
Riemann<- outer_exp(Riemann, x[,i])
}
# mean(Riemann)
approx <- sum(Riemann)/(n)^p
true <- (F(b)-F(a))^p #(exp(2)-exp(1))^p
# (1^4/4-0)^p
abs((approx-true)/true)
}
Riemann_test(2,5)
Riemann_test(2,15)
runif(n)
runif(n,min = a, max =b)
rSample<- matrix( runif(n * p,min = a, max =b), n,p)
rSample
f(rSample)
apply(f(rSample),1, *)
prod
apply(f(rSample),1, FUN = prod)
n
apply(f(rSample),1, FUN = prod)
mean(apply(f(rSample),1, FUN = prod))
(F(2)-F(1))^4
p
(F(2)-F(1))^2
MC_test<- function(n,p){
rSample<- matrix( runif(n * p,min = a, max =b), n,p)
approx <- mean(apply(f(rSample),1, FUN = prod))
true <- (F(b)-F(a))^p #(exp(2)-exp(1))^p
abs((approx-true)/true)
}
Riemann_test(2,5)
Riemann_test(2,5)
MC_test(2,5)
MC_test(2,5)
Riemann_test(2,5)
MC_test<- function(n,p){
n<- n^p
rSample<- matrix( runif(n * p,min = a, max =b), n,p)
approx <- mean(apply(f(rSample),1, FUN = prod))
true <- (F(b)-F(a))^p #(exp(2)-exp(1))^p
abs((approx-true)/true)
}
MC_test(2,5)
Riemann_test(2,5)
MC_test<- function(n,p){
n<- n^p
rSample<- matrix( runif(n * p,min = a, max =b), n,p)
approx <- mean(apply(f(rSample),1, FUN = prod))
true <- (F(b)-F(a))^p #(exp(2)-exp(1))^p
abs((approx-true)/true)
}
MC_test(2,5)
Riemann_test(2,5)
MC_test(2,5)
Riemann_test(2,5)
MC_test(5,5)
Riemann_test(2,5)
5^5
MC_test(5,10)
MC_test(2,10)
Riemann_test(2,5)
Riemann_test(2,10)
MC_test(2,10)
Riemann_test(2,10)
MC_test(2,10)
Riemann_test(2,10)
MC_test(2,10)
Riemann_test(2,10)
MC_test(2,10)
MC_test(2,10)
Riemann_test(2,10)
MC_test(2,10)
Riemann_test(2,10)
MC_test(2,10)
Riemann_test(2,10)
MC_test(2,11)
Riemann_test(2,10)
Riemann_test(2,5)
Riemann_test(2,5)
MC_test(2,11)
MC_test(2,11)
Riemann_test(2,5)
Riemann_test(2,11)
MC_test(2,11)
MC_test(2,11)
MC_test(2,11)
Riemann_test(2,11)
MC_test(2,5)
Riemann_test(2,11)
MC_test<- function(n,p){
rSample<- matrix( runif(n * p,min = a, max =b), n,p)
approx <- mean(apply(f(rSample),1, FUN = prod))
true <- (F(b)-F(a))^p #(exp(2)-exp(1))^p
abs((approx-true)/true)
}
MC_test(1000,11)
Riemann_test(2,11)
MC_test(10000,11)
Riemann_test(2,11)
MC_test(10000,11)
Riemann_test(2,11)
MC_test(10000,11)
Riemann_test(2,11)
MC_test(10000,11)
Riemann_test(2,11)
MC_test(10000,11)
Riemann_test(2,11)
MC_test(100000,11)
Riemann_test(2,11)
MC_test(100000,11)
Riemann_test(2,11)
MC_test(10000,11)
Riemann_test(2,11)
Riemann_test(2,11)
MC_test(10000,11)
Riemann_test(2,11)
2^11
MC_test(2^11,11)
Riemann_test(2,11)
MC_test(2^11,11)
Riemann_test(2,11)
MC_test(2^11,11)
Riemann_test(2,11)
Riemann_test(3,11)
MC_test(2^11,11)
MC_test(2^11,11)
f <- function(x) {
exp(x)
# x^2
}
F <- function(x) {
exp(x)
# x^3/3
}
#integrated over (0,1)^4
# = exp(x)*exp(y) *exp(z) *(e-1)
# = (e-1)^4
Riemann_test <- function(n,p) {
a <- 1
b <- 2
x = matrix(c(1:n) / n * (b - a) + a, n ,p) - (b - a) / n / 2
outer_exp <- function(x,y) {
c(outer(x,y,function(a,b) {
a * f(b)
}))
}
Riemann <- 1
for (i in 1:ncol(x)) {
Riemann <- outer_exp(Riemann, x[,i])
}
# mean(Riemann)
approx <- sum(Riemann) / (n) ^ p
true <- (F(b) - F(a)) ^ p #(exp(2)-exp(1))^p
# (1^4/4-0)^p
abs((approx - true) / true)
}
Riemann_test(2,5)
Riemann_test(2,15)
#####
MC_test <- function(n,p) {
rSample <- matrix(runif(n * p,min = a, max = b), n,p)
approx <- mean(apply(f(rSample),1, FUN = prod))
true <- (F(b) - F(a)) ^ p #(exp(2)-exp(1))^p
abs((approx - true) / true)
}
MC_test(2 ^ 11,11)
Riemann_test(3,11)
MC_test(2 ^ 11,11)
Riemann_test(3,11)
MC_test(2 ^ 11,11)
Riemann_test(3,11)
Riemann_test(2,11)
Riemann_test(4,11)
MC_test(2 ^ 11,11)
MC_test(100,11)
Riemann_test(4,11)
# setwd("~/Documents/sp/FIW/")
setwd("~/work/FIW/")
require(fields)
Z<- read.csv("spatial_data/z_2000_june.csv")
n1 <- 134
n2 <- 104
p<- ncol(Z)
plot_mat<- function(x){
image.plot(matrix(x,n1,n2),zlim=c(-4,4))
}
setwd("~/Documents/sp/FIW/")
setwd("~/work/FIW/")
require(fields)
Z<- read.csv("spatial_data/z_2000_june.csv")
n1 <- 134
n2 <- 104
p<- ncol(Z)
plot_mat<- function(x){
image.plot(matrix(x,n1,n2),zlim=c(-4,4))
}
x1 <- rep( c(1:n1), n2)
x2 <- rep(c(1:n2),each=n1)
X<- cbind(1, x1, x1^2, x1^3, x2, x2^2, x2^3)
XX <- t(X)%*%X
detrend <- function(y){
fitted<- X%*% solve(XX, t(X)%*% as.vector(y))
y - fitted
}
Z_detrend<- apply(Z, 2, detrend)
standardize <- function(x){
(x-mean(x))/sd(x)
}
Z_std<- apply(Z_detrend, 2, standardize)
for(i in 1:7)
image.plot(matrix(Z_std[,i],n1,n2), names(Z)[i])
Z_std
for(i in 1:7)
image.plot(matrix(Z_std[,i],n1,n2), main = names(Z)[i])
# setwd("~/Documents/sp/FIW/")
setwd("~/work/FIW/")
require(fields)
Z<- read.csv("spatial_data/z_2000_june.csv")
n1 <- 134
n2 <- 104
p<- ncol(Z)
plot_mat<- function(x){
image.plot(matrix(x,n1,n2),zlim=c(-4,4))
}
x1 <- rep( c(1:n1), n2)
x2 <- rep(c(1:n2),each=n1)
X<- cbind(1, x1, x1^2, x1^3, x2, x2^2, x2^3)
XX <- t(X)%*%X
detrend <- function(y){
fitted<- X%*% solve(XX, t(X)%*% as.vector(y))
y - fitted
}
Z_detrend<- apply(Z, 2, detrend)
standardize <- function(x){
(x-mean(x))/sd(x)
}
Z_std<- apply(Z_detrend, 2, standardize)
for(i in 1:7)
image.plot(matrix(Z_std[,i],n1,n2), main = names(Z)[i])
source("fiw.r")
fiw <- FIW(Z_std, x1, x2, 0, cov_func = "matern")
fiw<- runMCMC.FIW(fiw,100,adaptive = TRUE, burnin = TRUE, verbose= TRUE)
load ( file= "fiw.rda")
estR <- matrix(colMeans(fiw$trace_R),p,p)
EstRV <- estR + diag(fiw$V)
corEstRV <- diag(1/sqrt(diag(EstRV))) %*% EstRV %*% diag(1/sqrt(diag(EstRV)))
corEstRV
colnames(corEstRV)<- names(Z)
rownames(corEstRV)<- names(Z)
image.plot(matrix(fiw$fgp_list[[1]]$z,n1,n2), zlim =c(-15,15))
image.plot(matrix(fiw$fgp_list[[1]]$mu,n1,n2), zlim =c(-15,15))
setwd("~/Documents/sp/FIW/")
setwd("~/work/FIW/")
require(fields)
require(fftwtools)
n<- 1000
# x <-c(1:n)
x1 <- rnorm(n)
# x1 <- (x1-min(x1))/(max(x1)-min(x1))
x2 <- rnorm(n)
# x2 <- (x2-min(x2))/(max(x2)-min(x2))
# y<- sin(x/n*pi*30)*10 + rnorm(n)
dist1_mat <- outer(x1,x1,"-")
dist2_mat <- outer(x2,x2,"-")
rho1 <- .5
rho2 <- .3
cov_mat <- 100 *exp(- dist1_mat ^2/ 2/rho1/rho1) *exp(- dist2_mat ^2/ 2/rho2/rho2)
# cov_mat <- 100 *exp(- abs(dist1_mat)/rho1) *exp(-abs( dist2_mat)/rho2)
diag(cov_mat) = diag(cov_mat) + 1
# cov_mat <- 100*exp(- abs(dist_mat)/test_rho)
eg_cov_mat<- eigen(cov_mat)
evalue_cov_mat<- Re(eg_cov_mat$values)
evalue_cov_mat[evalue_cov_mat<0]<-0
evector_cov_mat<- Re(eg_cov_mat$vectors)
L <- evector_cov_mat%*% diag(sqrt(evalue_cov_mat))
z<- L%*%rnorm(n)
source(("fgp.r"))
###############
fgp<- FGP(z,x1, x2, 1, cov_func = "squared_exp")
fgp<- initialize(fgp)
# plot(fgp$x1, fgp$y1)
##############
fgp<- runMCMC(fgp,1000, adaptive = TRUE)
n_sample <- length(fgp$trace_rho1)
ts.plot(fgp$trace_rho1)
fgp<- runMCMC(fgp,100, adaptive = FALSE, burnin =FALSE)
n_sample <- length(fgp$trace_rho1)
ts.plot(fgp$trace_rho1)
z0_mat<- matrix(fgp$z0, fgp$n1,fgp$n2)
image.plot(z0_mat)
#est mean
mu_mat<- matrix(fgp$mu, fgp$n1,fgp$n2)
image.plot(mu_mat)
require("fields")
require("fftwtools")
source("fiw.r")
data = read.csv("data.csv")
z = data[,names(data) %in% c("huss", "rsds", "ps", "tas")]
x1 = data$x1
x2 = data$x2
p=4
fiw <- FIW(z, x1, x2, 0, cov_func = "matern")
fiw<- runMCMC.FIW(fiw,10,adaptive = TRUE, burnin = TRUE, verbose = T )
setwd("C:/Users/leo/git/empiricalTensor/network_data_gpu/")
U<- read.csv("./test/U.csv",header = F)$V1
D<- read.csv("./test/D.csv",header = F)$V1
U
dim(U)
length(U)
n = 1105
r = 100
p = 44
U<- array(U,dim = c(n,r))
D<- array(D,dim = c(r,r,p))
U
avgA<- read.csv("./test/avgA.csv",header = F)$V1
avgA<- array(avgA, dim=c(n,n))
rasterImage(avgA)
as.raster(avgA)
image(as.raster(avgA))
avgA
dim(avgA)
image(as.raster(avgA))
21*10000/10
(21*10000/10)/3600
rasterImage(avgA,0,0,nrow(avgA),ncol(avgA))
plot.new()
rasterImage(avgA,0,0,nrow(avgA),ncol(avgA))
plot(NA,xlim=c(0,nrow(avgA)),ylim=c(0,ncol(avgA)))
rasterImage(avgA,0,0,nrow(avgA),ncol(avgA))
UDU = U%*%D[,,1]%*%t(U)
plotHugeMat<-function(img){
plot(NA,xlim=c(0,nrow(img)),ylim=c(0,ncol(img)))
rasterImage(img,0,0,nrow(img),ncol(img))
}
plotHugeMat(UDU)
plotHugeMat(pnorm(UDU))
plotHugeMat(pnorm(UDU))
UDU = U%*%D[,,2]%*%t(U)
plotHugeMat(pnorm(UDU))
plotHugeMat(D[,,1])
D[,,1]
plotHugeMat<-function(img){
img=(img -min(img))/(max(img)-min(img))
plot(NA,xlim=c(0,nrow(img)),ylim=c(0,ncol(img)))
rasterImage(img,0,0,nrow(img),ncol(img))
}
plotHugeMat(pnorm(UDU))
plotHugeMat(D[,,1])
image(D[,,1])
(D[,,1])
diag(D[,,1])
diag(D[,,2])
diag(D[,,3])
diag(D[,,4])
min(avgA)
min(avgA[avgA>0])
min(avgA[avgA<1])
max(avgA[avgA<1])
qavgA = qnorm(avgA)
qavgA
max(qavgA)
avgA[avgA==1] = 0.999
avgA[avgA==0] = 0.001
qavgA = qnorm(avgA)
svdAvgA=svd(qavgA,nu = 100,nv = 100)
svdAvgA$d
svdAvgA$u
egA = eigen(qavgA,T)
egA$values
setwd("C:/Users/leo/git/empiricalTensor/network_data_gpu/")
U<- read.csv("./test/U.csv",header = F)$V1
D<- read.csv("./test/D.csv",header = F)$V1
avgA<- read.csv("./test/avgA.csv",header = F)$V1
n = 1105
r = 100
p = 44
U<- array(U,dim = c(n,r))
D<- array(D,dim = c(r,r,p))
avgA<- array(avgA, dim=c(n,n))
plotHugeMat<-function(img){
img=(img -min(img))/(max(img)-min(img))
plot(NA,xlim=c(0,nrow(img)),ylim=c(0,ncol(img)))
rasterImage(img,0,0,nrow(img),ncol(img))
}
UDU = U%*%D[,,2]%*%t(U)
