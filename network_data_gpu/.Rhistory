if (r <= 5.) { #/* <==> min(p,1-p) >= exp(-25) ~= 1.3888e-11 */
r = r+ -1.6;
val =
(((((((r * 7.7454501427834140764e-4 + .0227238449892691845833) * r +
.24178072517745061177) *
r +
1.27045825245236838258) *
r +
3.64784832476320460504) *
r +
5.7694972214606914055) *
r +
4.6303378461565452959) *
r +
1.42343711074968357734) /
(((((((r * 1.05075007164441684324e-9 + 5.475938084995344946e-4) * r +
.0151986665636164571966) *
r +
.14810397642748007459) *
r +
.68976733498510000455) *
r +
1.6763848301838038494) *
r +
2.05319162663775882187) *
r +
1.);
} else { #/* very close to  0 or 1 */
r = r+ -5.;
val = (((((((r * 2.01033439929228813265e-7 + 2.71155556874348757815e-5) *
r +
.0012426609473880784386) *
r +
.026532189526576123093) *
r +
.29656057182850489123) *
r +
1.7848265399172913358) *
r +
5.4637849111641143699) *
r +
6.6579046435011037772) /
(((((((r * 2.04426310338993978564e-15 + 1.4215117583164458887e-7) *
r +
1.8463183175100546818e-5) *
r +
7.868691311456132591e-4) *
r +
.0148753612908506148525) *
r +
.13692988092273580531) *
r +
.59983220655588793769) *
r +
1.);
}
if (q < 0.0)
val = -val;
#/* return (q >= 0.)? r : -r ;*/
}
return (mu + sigma * val);
}
R_D_Lval<- function(p, lower_tail=T){	ifelse(lower_tail, (p) , (0.5 - (p) + 0.5))}
R_D_Cval<- function(p, lower_tail=T){	ifelse(lower_tail,(0.5 - (p) + 0.5), p)}
R_DT_qIv<- function(p, log_p=F, lower_tail=T){	ifelse(log_p , ifelse(lower_tail , exp(p) , - expm1(p)),R_D_Lval(p,lower_tail))}
R_DT_CIv = function(p, log_p=F, lower_tail=T){	ifelse(log_p , ifelse(lower_tail, -expm1(p) , exp(p)), R_D_Cval(p))}
R_DT_CIv(0.1)
qnormr<-  function{(p,mu,sigma, log_p=F, lower_tail=T){
if (sigma == 0) return(mu);
# p_ =p;
p_ = R_DT_qIv(p); #/* real lower_tail prob. p */
q = p_ - 0.5;
if (abs(q) <= .425) { # 0.075 <= p <= 0.925 #
r = .180625 - q * q;
val = q *
(((((((r * 2509.0809287301226727 + 33430.575583588128105) * r +
67265.770927008700853) *
r +
45921.953931549871457) *
r +
13731.693765509461125) *
r +
1971.5909503065514427) *
r +
133.14166789178437745) *
r +
3.387132872796366608) /
(((((((r * 5226.495278852854561 + 28729.085735721942674) * r +
39307.89580009271061) *
r +
21213.794301586595867) *
r +
5394.1960214247511077) *
r +
687.1870074920579083) *
r +
42.313330701600911252) *
r +
1.);}  else{
#/* r = min(p, 1-p) < 0.075 */
if (q > 0){
r = R_DT_CIv(p);}else{
r = p_;
}#/* = R_DT_Iv(p) ^=  p */
r = sqrt(-(   ifelse((log_p && ((lower_tail && q <= 0) || (!lower_tail && q > 0)))
, p  , log(r))));
# /* r = sqrt(-log(r))  <==>  min(p, 1-p) = exp( - r^2 ) */
#ifdef DEBUG_qnorm
#   REprintf("\t close to 0 or 1: r = %7g\n", r);
#endif
if (r <= 5.) { #/* <==> min(p,1-p) >= exp(-25) ~= 1.3888e-11 */
r = r+ -1.6;
val =
(((((((r * 7.7454501427834140764e-4 + .0227238449892691845833) * r +
.24178072517745061177) *
r +
1.27045825245236838258) *
r +
3.64784832476320460504) *
r +
5.7694972214606914055) *
r +
4.6303378461565452959) *
r +
1.42343711074968357734) /
(((((((r * 1.05075007164441684324e-9 + 5.475938084995344946e-4) * r +
.0151986665636164571966) *
r +
.14810397642748007459) *
r +
.68976733498510000455) *
r +
1.6763848301838038494) *
r +
2.05319162663775882187) *
r +
1.);
} else { #/* very close to  0 or 1 */
r = r+ -5.;
val = (((((((r * 2.01033439929228813265e-7 + 2.71155556874348757815e-5) *
r +
.0012426609473880784386) *
r +
.026532189526576123093) *
r +
.29656057182850489123) *
r +
1.7848265399172913358) *
r +
5.4637849111641143699) *
r +
6.6579046435011037772) /
(((((((r * 2.04426310338993978564e-15 + 1.4215117583164458887e-7) *
r +
1.8463183175100546818e-5) *
r +
7.868691311456132591e-4) *
r +
.0148753612908506148525) *
r +
.13692988092273580531) *
r +
.59983220655588793769) *
r +
1.);
}
if (q < 0.0)
val = -val;
#/* return (q >= 0.)? r : -r ;*/
}
return (mu + sigma * val);
R_D_Lval<- function(p, lower_tail=T){	ifelse(lower_tail, (p) , (0.5 - (p) + 0.5))}
R_D_Cval<- function(p, lower_tail=T){	ifelse(lower_tail,(0.5 - (p) + 0.5), p)}
R_DT_qIv<- function(p, log_p=F, lower_tail=T){	ifelse(log_p , ifelse(lower_tail , exp(p) , - expm1(p)),R_D_Lval(p,lower_tail))}
R_DT_CIv = function(p, log_p=F, lower_tail=T){	ifelse(log_p , ifelse(lower_tail, -expm1(p) , exp(p)), R_D_Cval(p))}
R_DT_CIv(0.1)
qnormr<-  function(p,mu,sigma, log_p=F, lower_tail=T){
if (sigma == 0) return(mu);
# p_ =p;
p_ = R_DT_qIv(p); #/* real lower_tail prob. p */
q = p_ - 0.5;
if (abs(q) <= .425) { # 0.075 <= p <= 0.925 #
r = .180625 - q * q;
val = q *
(((((((r * 2509.0809287301226727 + 33430.575583588128105) * r +
67265.770927008700853) *
r +
45921.953931549871457) *
r +
13731.693765509461125) *
r +
1971.5909503065514427) *
r +
133.14166789178437745) *
r +
3.387132872796366608) /
(((((((r * 5226.495278852854561 + 28729.085735721942674) * r +
39307.89580009271061) *
r +
21213.794301586595867) *
r +
5394.1960214247511077) *
r +
687.1870074920579083) *
r +
42.313330701600911252) *
r +
1.);}  else{
#/* r = min(p, 1-p) < 0.075 */
if (q > 0){
r = R_DT_CIv(p);}else{
r = p_;
}#/* = R_DT_Iv(p) ^=  p */
r = sqrt(-(   ifelse((log_p && ((lower_tail && q <= 0) || (!lower_tail && q > 0)))
, p  , log(r))));
# /* r = sqrt(-log(r))  <==>  min(p, 1-p) = exp( - r^2 ) */
#ifdef DEBUG_qnorm
#   REprintf("\t close to 0 or 1: r = %7g\n", r);
#endif
if (r <= 5.) { #/* <==> min(p,1-p) >= exp(-25) ~= 1.3888e-11 */
r = r+ -1.6;
val =
(((((((r * 7.7454501427834140764e-4 + .0227238449892691845833) * r +
.24178072517745061177) *
r +
1.27045825245236838258) *
r +
3.64784832476320460504) *
r +
5.7694972214606914055) *
r +
4.6303378461565452959) *
r +
1.42343711074968357734) /
(((((((r * 1.05075007164441684324e-9 + 5.475938084995344946e-4) * r +
.0151986665636164571966) *
r +
.14810397642748007459) *
r +
.68976733498510000455) *
r +
1.6763848301838038494) *
r +
2.05319162663775882187) *
r +
1.);
} else { #/* very close to  0 or 1 */
r = r+ -5.;
val = (((((((r * 2.01033439929228813265e-7 + 2.71155556874348757815e-5) *
r +
.0012426609473880784386) *
r +
.026532189526576123093) *
r +
.29656057182850489123) *
r +
1.7848265399172913358) *
r +
5.4637849111641143699) *
r +
6.6579046435011037772) /
(((((((r * 2.04426310338993978564e-15 + 1.4215117583164458887e-7) *
r +
1.8463183175100546818e-5) *
r +
7.868691311456132591e-4) *
r +
.0148753612908506148525) *
r +
.13692988092273580531) *
r +
.59983220655588793769) *
r +
1.);
}
if (q < 0.0)    val = -val;
#/* return (q >= 0.)? r : -r ;*/
}
return (mu + sigma * val);
}
rnorm(1000)
z<-rnorm(1000)
z<-runif(1000)
qnorm(z) - qnormr(z)
R_D_Lval<- function(p, lower_tail=T){	ifelse(lower_tail, (p) , (0.5 - (p) + 0.5))}
R_D_Cval<- function(p, lower_tail=T){	ifelse(lower_tail,(0.5 - (p) + 0.5), p)}
R_DT_qIv<- function(p, log_p=F, lower_tail=T){	ifelse(log_p , ifelse(lower_tail , exp(p) , - expm1(p)),R_D_Lval(p,lower_tail))}
R_DT_CIv = function(p, log_p=F, lower_tail=T){	ifelse(log_p , ifelse(lower_tail, -expm1(p) , exp(p)), R_D_Cval(p))}
R_DT_CIv(0.1)
qnormr<-  function(p,mu=0,sigma=1, log_p=F, lower_tail=T){
if (sigma == 0) return(mu);
# p_ =p;
p_ = R_DT_qIv(p); #/* real lower_tail prob. p */
q = p_ - 0.5;
if (abs(q) <= .425) { # 0.075 <= p <= 0.925 #
r = .180625 - q * q;
val = q *
(((((((r * 2509.0809287301226727 + 33430.575583588128105) * r +
67265.770927008700853) *
r +
45921.953931549871457) *
r +
13731.693765509461125) *
r +
1971.5909503065514427) *
r +
133.14166789178437745) *
r +
3.387132872796366608) /
(((((((r * 5226.495278852854561 + 28729.085735721942674) * r +
39307.89580009271061) *
r +
21213.794301586595867) *
r +
5394.1960214247511077) *
r +
687.1870074920579083) *
r +
42.313330701600911252) *
r +
1.);}  else{
#/* r = min(p, 1-p) < 0.075 */
if (q > 0){
r = R_DT_CIv(p);}else{
r = p_;
}#/* = R_DT_Iv(p) ^=  p */
r = sqrt(-(   ifelse((log_p && ((lower_tail && q <= 0) || (!lower_tail && q > 0)))
, p  , log(r))));
# /* r = sqrt(-log(r))  <==>  min(p, 1-p) = exp( - r^2 ) */
#ifdef DEBUG_qnorm
#   REprintf("\t close to 0 or 1: r = %7g\n", r);
#endif
if (r <= 5.) { #/* <==> min(p,1-p) >= exp(-25) ~= 1.3888e-11 */
r = r+ -1.6;
val =
(((((((r * 7.7454501427834140764e-4 + .0227238449892691845833) * r +
.24178072517745061177) *
r +
1.27045825245236838258) *
r +
3.64784832476320460504) *
r +
5.7694972214606914055) *
r +
4.6303378461565452959) *
r +
1.42343711074968357734) /
(((((((r * 1.05075007164441684324e-9 + 5.475938084995344946e-4) * r +
.0151986665636164571966) *
r +
.14810397642748007459) *
r +
.68976733498510000455) *
r +
1.6763848301838038494) *
r +
2.05319162663775882187) *
r +
1.);
} else { #/* very close to  0 or 1 */
r = r+ -5.;
val = (((((((r * 2.01033439929228813265e-7 + 2.71155556874348757815e-5) *
r +
.0012426609473880784386) *
r +
.026532189526576123093) *
r +
.29656057182850489123) *
r +
1.7848265399172913358) *
r +
5.4637849111641143699) *
r +
6.6579046435011037772) /
(((((((r * 2.04426310338993978564e-15 + 1.4215117583164458887e-7) *
r +
1.8463183175100546818e-5) *
r +
7.868691311456132591e-4) *
r +
.0148753612908506148525) *
r +
.13692988092273580531) *
r +
.59983220655588793769) *
r +
1.);
}
if (q < 0.0)    val = -val;
#/* return (q >= 0.)? r : -r ;*/
}
return (mu + sigma * val);
}
z<-runif(1000)
qnorm(z) - qnormr(z)
z
qnorm(z) - sapply(z,qnormr)
z<-runif(10000)
qnorm(z) - sapply(z,qnormr)
sum(qnorm(z) - sapply(z,qnormr))
qnorm(0)
R_DT_qIv(1)
R_DT_qIv(0.1)
R_DT_qIv(0.5)
R_DT_CIv(0.1)
R_DT_CIv(0.6)
log_p && ((lower_tail && q <= 0) || (!lower_tail && q > 0))
log_p && ((lower_tail && q <= 0) || (!lower_tail && q > 0))
log_p && ((lower_tail && q <= 0) || (!lower_tail && q > 0))
setwd("C:/Users/leo/git/empiricalTensor/network_data_gpu/")
Z<- read.csv("./test/z.csv",header = F)$V1
D<- read.csv("./test/D.csv",header = F)$V1
Z<- read.csv("./test/z.csv",header = F)$V1
p<- read.csv("./test/p.csv",header = F)$V1
p
hist(p)
hist(Z)
z - qnorm(p)
z<- read.csv("./test/z.csv",header = F)$V1
p<- read.csv("./test/p.csv",header = F)$V1
hist(p)
z - qnorm(p)
z - qnorm(p)
hist(z - qnorm(p))
p
0.075 <= p <= 0.925
(0.075 <= p && p <= 0.925)
(0.075 <= p & p <= 0.925)
set1 = (0.075 <= p & p <= 0.925)
hist(z[set1] - qnorm(p[set1]))
z[set1] - qnorm(p[set1])
z<- read.csv("./test/z.csv",header = F)$V1
p<- read.csv("./test/p.csv",header = F)$V1
z<- read.csv("./test/z.csv",header = F)$V1
p<- read.csv("./test/p.csv",header = F)$V1
p
set1 = (0.075 <= p() & (p <= 0.925)
z[set1]
qnorm(p[set1])
set1 = (0.075 <= p) & (p <= 0.925)
z[set1]
qnorm(p[set1])
pnorm(z[set1])
pnorm(z[set1]) - p[set1]
z[set1]
z[set1]
qnorm(p[set1])
z[set1]
qnorm(p[set1])
z[set1]
qnorm(p[set1])
z[set1]
qnorm(p[set1])
z[set1]
qnorm(p[set1])
z[set1]
z<- read.csv("./test/z.csv",header = F)$V1
p<- read.csv("./test/p.csv",header = F)$V1
set1 = (0.075 <= p) & (p <= 0.925)
z[set1]
qnorm(p[set1])
z[set1]-qnorm(p[set1])
hist(z[set1]-qnorm(p[set1]))
hist(z-qnorm(p))
(z-qnorm(p))
set1 = (0.075 <= p) & (p <= 0.925)
hist(z[set1]-qnorm(p[set1]))
z<- read.csv("./test/z.csv",header = F)$V1
p<- read.csv("./test/p.csv",header = F)$V1
set1 = (0.075 <= p) & (p <= 0.925)
hist(z[set1]-qnorm(p[set1]))
hist(pnorm(z[set1])-(p[set1]))
set1 = (0.075 <= p) & (p <= 0.925)
hist(pnorm(z[set1])-(p[set1]))
set1 = (0.075 > p) || (p > 0.925)
hist(pnorm(z[set1])-(p[set1]))
set1
set1 = (0.075 > p) | (p > 0.925)
hist(pnorm(z[set1])-(p[set1]))
pnorm(z[set1])
p[set1]
pnorm(z[set1])
p[set1]
pnorm(z[set1])[1:10]
p[set1][1:10]
set1 = (0.075 <= p) & (p <= 0.925)
hist(pnorm(z[set1])-(p[set1]))
set1 = (0.075 > p) | (p > 0.925)
pnorm(z[set1])[1:10]
p[set1][1:10]
z<- read.csv("./test/z.csv",header = F)$V1
p<- read.csv("./test/p.csv",header = F)$V1
set1 = (0.075 <= p) & (p <= 0.925)
hist(pnorm(z[set1])-(p[set1]))
set1 = (0.075 > p) | (p > 0.925)
pnorm(z[set1])[1:10]
p[set1][1:10]
hist(pnorm(z[set1])-p[set1])
z<- read.csv("./test/z.csv",header = F)$V1
p<- read.csv("./test/p.csv",header = F)$V1
set1 = (0.075 <= p) & (p <= 0.925)
hist(pnorm(z[set1])-(p[set1]))
set1 = (0.075 > p) | (p > 0.925)
hist(pnorm(z[set1])-p[set1])
z<- read.csv("./test/z.csv",header = F)$V1
p<- read.csv("./test/p.csv",header = F)$V1
set1 = (0.075 <= p) & (p <= 0.925)
hist(pnorm(z[set1])-(p[set1]))
set1 = (0.075 > p) | (p > 0.925)
hist(pnorm(z[set1])-p[set1])
hist(pnorm(z[set1])-(p[set1]))
hist(pnorm(z[set1])-p[set1])
