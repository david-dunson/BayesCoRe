n=10
p=5
X<- matrix(rnorm(n*p),5)
X<- matrix(rnorm(n*p),10)
Z<- runif(10)
t(X)%*%diag(Z)%*% X
XZX<- t(X)%*%diag(Z)%*% X
svdX<- svd(X)
D<- svdX$d
U<- svdX$u
D<- svdX$d
V<- svdX$v
U%*%diag(D)%*%V
X-U%*%diag(D)%*%V
X-U%*%diag(D)%*%t(V)
U%*%diag(D)%*%t(V)
U
v
V
t(V)%*%V
U%*%t(U)
t(U) %*% U
t(U) %*% U
t(U) %*% Z %*% U
t(U) %*% diag(Z) %*% U
x <- rnorm(50)
y <- runif(30)
ks.test(x, y)
hist(rgamma(10000,1,2))
hist(rgamma(10000,2,2))
hist(rgamma(10000,2,2),breaks=100)
hist(rgamma(10000,10,2),breaks=100)
hist(rgamma(10000,1,2))
hist(rgamma(10000,100,2),breaks=100)
hist(rgamma(10000,2,0.5),breaks=100)
dgamma(0.1,2,0.5)
dgamma(0.1,2,0.5)
dgamma(0.1,2,0.5)
dgamma(0.01,2,0.5)
dgamma(0.001,2,0.5)
dgamma(0.001,1,0.5)
dgamma(0.001,1,0.00001)
hist(rgamma(10000,1,0.0001))
hist(rgamma(10000,1,1/0.0001))
hist(rgamma(10000,1,1/0.0001))
hist(rgamma(10000,1,1/0.0001))
hist(rgamma(10000,2,2))
hist(rgamma(10000,2,0.5))
hist(rgamma(10000,2,0.5),xlim=c(0,1))
hist(rgamma(10000,2,0.5),xlim=c(0,1),breaks=1000)
mean(rgamma(10000,2,0.5))
mean(rgamma(10000,2,2))
hist(rgamma(10000,2,2),xlim=c(0,1),breaks=1000)
hist(1/rgamma(10000,1,1/0.0001))
hist(1/rgamma(10000,1,1))
hist(1/rgamma(10000,100,100))
hist(1/rgamma(10000,0.5,0.5))
hist(1/rgamma(10000,0.5,0.5),xlim=c(0,1))
hist(1/rgamma(10000,10,10),xlim=c(0,1))
hist(1/rgamma(10000,1000,1000),xlim=c(0,1))
hist(1/rgamma(10000,1000,2000),xlim=c(0,1))
hist(1/rgamma(10000,1000,2000),xlim=c(0,1))
hist(1/rgamma(10000,500,250),xlim=c(0,1))
hist(1/rgamma(10000,5,2.5),xlim=c(0,1))
asin(1)
asin(1)*2
asin(0)
hist(asin(runif(1000))))
runif(1000)
hist(asin(runif(1000))))
hist(asin(runif(1000)))
hist(asin(runif(1000)),breas=100)
hist(asin(runif(10000)),breas=100)
hist(acos(runif(10000)),breas=100)
warnings()
hist(asin(runif(10000)),breaks = 100)
hist(acos(runif(10000)),breaks=100)
rcauchy(1000)
hist(rcauchy(1000),break =100)
hist(rcauchy(1000),breaks =100)
hist(rcauchy(1000),breaks =100,xlim=c(-1,1))
hist(rcauchy(10000),breaks =1000,xlim=c(-1,1))
hist(rcauchy(100)* rcauchy(100),breaks =1000,xlim=c(-1,1))
setwd("C:/Users/leo/git/empiricalTensor/test/")
require("rstan")
rstan_options(auto_write = TRUE)
ss_model = stan_model(file= "dp_mixture.stan")
extractPosterior<-function(varname, dimen, stan_fit){
if(dimen==1){
eval(parse(text=paste(stan_fit,"@sim$samples[[1]]$`",varname,"`",sep="")))
}else{
sapply(c(1:dimen), function(i)  eval(parse(text=paste(stan_fit,"@sim$samples[[1]]$`",varname,"[",i, "]`",sep=""))))
}
}
N = 100
d=4;
p = c(0.1,0.2,0.7)
mu<- c(1,2,5)
sigma=0.5
y<- numeric(N)
alpha =0.5
for(i in 1:N){
y[i] = rnorm(1, sum(rmultinom(1,1,p)*mu),sigma)
}
lambda=1E5
toy_dat <- list(N=N, d=d,y=y, alpha=alpha, lambda=lambda)
init<- list(list(p= rep(1/d,d), mu=rnorm(d),sigma=1))
ss_fit <- sampling(ss_model, data = toy_dat,init=init, iter = 20000, chains = 1)
