post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[5000:10000,])
colMeans(post_beta[5000:10000,])
beta
##### Data ###
N = 30
p = 40
p_eff = 3
X = matrix(rnorm(N*p),N)
beta = rep(0,p)
beta[1:p_eff] = c(1:p_eff)*3
Z = rnorm(N, X%*%beta,1)
# beta
d= eigen(t(X)%*%X)$values[1] + 1
# d = 128
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= c(solve( t(X)%*%X, t(X)%*%Z)), y=rnorm(p),prob=0.5))
ss_fit <- sampling(ss_model, data = toy_dat,init=init,iter = 10000, chains = 1)
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob=0.5))
ss_fit <- sampling(ss_model, data = toy_dat,init=init,iter = 10000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[5000:10000,])
colMeans(post_beta[5000:10000,])
beta
includ_prob<- extractPosterior("includ_prob", p,"ss_fit")
plot(colMeans(includ_prob[8000:10000,]))
ts.plot((includ_prob[8000:10000,]))
acf(post_beta[,1:3][8000:10000,])
acf(post_beta[,1:5][8000:10000,])
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[5000:10000,1:3])
ts.plot(post_beta[5000:10000,1:3])
colMeans(post_beta[5000:10000,1:3])
beta
require("blasso")
install.packages("blasso")
require("monomvn")
install.packages("monomvn")
install.packages("monomvn")
require("monomvn")
hs_fit= blasso(X,y, case="hs")
Z
hs_fit= blasso(X,Z, case="hs")
hs_fit$lambda2
hs_fit$mu
hs_fit$beta
colMeans(hs_fit$beta)
plot(colMeans(hs_fit$beta))
acf(post_beta[,1:5][8000:10000,])
includ_prob<- extractPosterior("includ_prob", p,"ss_fit")
plot(colMeans(includ_prob[8000:10000,]))
ts.plot((includ_prob[8000:10000,]))
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[5000:10000,1:3])
colMeans(post_beta[5000:10000,1:3])
beta
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
beta0
d= eigen(t(X)%*%X)$values[1] + 0.1
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob=0.5))
ss_fit <- sampling(ss_model, data = toy_dat,init=init,iter = 10000, chains = 1)
ss_fit <- sampling(ss_model, data = toy_dat,init=init,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[5000:10000,1:3])
ts.plot(post_beta,1:3])
ts.plot(post_beta[1:3])
ts.plot(post_beta[,1:3])
colMeans(post_beta[5000:10000,1:3])
colMeans(post_beta[,1:3])
beta
includ_prob<- extractPosterior("includ_prob", p,"ss_fit")
includ_prob
includ_prob[1,]
includ_prob[1000,]
plot(colMeans(includ_prob[8000:10000,]))
ts.plot((includ_prob[8000:10000,]))
ss_fit <- sampling(ss_model, data = toy_dat,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
includ_prob<- extractPosterior("includ_prob", p,"ss_fit")
plot(colMeans(includ_prob[8000:10000,]))
ts.plot((includ_prob[8000:10000,]))
beta0 = c(solve( t(X)%*%X + diag(1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
beta0
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob=0.5))
ss_fit <- sampling(ss_model, data = toy_dat,iter = 1000, chains = 1)
ss_fit <- sampling(ss_model, data = toy_dat,init=init,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
includ_prob<- extractPosterior("includ_prob", p,"ss_fit")
plot(colMeans(includ_prob[8000:10000,]))
ts.plot((includ_prob[8000:10000,]))
acf(post_beta[,1:5][8000:10000,])
plot(colMeans(includ_prob))
ts.plot(includ_prob)
acf(post_beta[,1:5])
ss_model = stan_model(file= "spike_and_slab2.stan")
ss_model = stan_model(file= "spike_and_slab2.stan")
extractPosterior<-function(varname, dimen, stan_fit){
sapply(c(1:dimen), function(i)  eval(parse(text=paste(stan_fit,"@sim$samples[[1]]$`",varname,"[",i, "]`",sep=""))))
}
N = 30
p = 40
p_eff = 3
X = matrix(rnorm(N*p),N)
beta = rep(0,p)
beta[1:p_eff] = c(1:p_eff)*3
Z = rnorm(N, X%*%beta,1)
d= eigen(t(X)%*%X)$values[1] + 0.1
n
beta0 = c(solve( t(X)%*%X + diag(1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob=0.5))
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.9,p)))
ss_fit <- sampling(ss_model, data = toy_dat,init=init,iter = 1000, chains = 1)
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.9,p)))
ss_fit <- sampling(ss_model, data = toy_dat,init=init,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
includ_prob<- extractPosterior("includ_prob", p,"ss_fit")
plot(colMeans(includ_prob))
ts.plot(includ_prob)
acf(post_beta[,1:5])
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.5,p)))
ss_fit <- sampling(ss_model, data = toy_dat,init=init,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
includ_prob<- extractPosterior("includ_prob", p,"ss_fit")
plot(colMeans(includ_prob))
ts.plot(includ_prob)
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.5,p)))
ss_fit <- sampling(ss_model, data = toy_dat,init=init,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
ss_model = stan_model(file= "spike_and_slab2.stan")
require("rstan")
rstan_options(auto_write = TRUE)
ss_model = stan_model(file= "spike_and_slab2.stan")
extractPosterior<-function(varname, dimen, stan_fit){
sapply(c(1:dimen), function(i)  eval(parse(text=paste(stan_fit,"@sim$samples[[1]]$`",varname,"[",i, "]`",sep=""))))
}
N = 30
p = 40
p_eff = 3
X = matrix(rnorm(N*p),N)
beta = rep(0,p)
beta[1:p_eff] = c(1:p_eff)*3
Z = rnorm(N, X%*%beta,1)
d= eigen(t(X)%*%X)$values[1] + 0.1
n
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.5,p)))
ss_fit <- sampling(ss_model, data = toy_dat,init=init,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
includ_prob<- extractPosterior("includ_prob", p,"ss_fit")
plot(colMeans(includ_prob))
ts.plot(includ_prob)
acf(post_beta[,1:5])
includ_prob<- extractPosterior("includ_prob", p,"ss_fit")
plot(colMeans(includ_prob))
ts.plot(includ_prob)
extractPosterior<-function(varname, dimen, stan_fit){
sapply(c(1:dimen), function(i)  eval(parse(text=paste(stan_fit,"@sim$samples[[1]]$`",varname,"[",i, "]`",sep=""))))
}
##### Data ###
N = 30
p = 40
p_eff = 3
X = matrix(rnorm(N*p),N)
beta = rep(0,p)
beta[1:p_eff] = c(1:p_eff)*3
Z = rnorm(N, X%*%beta,1)
# beta
d= eigen(t(X)%*%X)$values[1] + 0.1
# d = 128
n
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.5,p)))
ss_fit <- sampling(ss_model, data = toy_dat,init=init,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
d= eigen(t(X)%*%X)$values[1] + 1
n
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.5,p)))
ss_fit <- sampling(ss_model, data = toy_dat,init=init,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
X = matrix(rnorm(N*p),N)
beta = rep(0,p)
beta[1:p_eff] = c(1:p_eff)*3
Z = rnorm(N, X%*%beta,1)
# beta
d= eigen(t(X)%*%X)$values[1] + 1
# d = 128
n
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.5,p)))
ss_fit <- sampling(ss_model, data = toy_dat,init=init,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
X = matrix(rnorm(N*p),N)
beta = rep(0,p)
beta[1:p_eff] = c(1:p_eff)*3
Z = rnorm(N, X%*%beta,1)
# beta
d= eigen(t(X)%*%X)$values[1] + 1
# d = 128
n
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.5,p)))
ss_fit <- sampling(ss_model, data = toy_dat,init=init,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
X = matrix(rnorm(N*p),N)
beta = rep(0,p)
beta[1:p_eff] = c(1:p_eff)*3
Z = rnorm(N, X%*%beta,1)
# beta
d= eigen(t(X)%*%X)$values[1] + 1
# d = 128
n
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.5,p)))
ss_fit <- sampling(ss_model, data = toy_dat,init=init,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
##### Data ###
N = 30
p = 40
p_eff = 3
X = matrix(rnorm(N*p),N)
beta = rep(0,p)
beta[1:p_eff] = c(1:p_eff)*3
Z = rnorm(N, X%*%beta,1)
# beta
d= eigen(t(X)%*%X)$values[1] + 1
# d = 128
n
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.5,p)))
ss_fit <- sampling(ss_model, data = toy_dat,init=init,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
includ_prob<- extractPosterior("includ_prob", p,"ss_fit")
plot(colMeans(includ_prob))
ts.plot(includ_prob)
acf(post_beta[,1:5])
prob<- extractPosterior("prob", p,"ss_fit")
plot(colMeans(prob))
ts.plot(includ_prob)
plot(colMeans(prob))
ts.plot(includ_prob)
prob<- extractPosterior("prob", p,"ss_fit")
plot(colMeans(prob))
ts.plot(includ_prob)
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.9,p)))
ss_fit <- sampling(ss_model, data = toy_dat,init=init,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
includ_prob<- extractPosterior("includ_prob", p,"ss_fit")
plot(colMeans(includ_prob))
ts.plot(includ_prob)
prob<- extractPosterior("prob", p,"ss_fit")
plot(colMeans(prob))
ts.plot(includ_prob)
includ_prob<- extractPosterior("includ_prob", p,"ss_fit")
plot(colMeans(includ_prob))
ts.plot(includ_prob)
require("rstan")
rstan_options(auto_write = TRUE)
ss_model = stan_model(file= "spike_and_slab2.stan")
extractPosterior<-function(varname, dimen, stan_fit){
sapply(c(1:dimen), function(i)  eval(parse(text=paste(stan_fit,"@sim$samples[[1]]$`",varname,"[",i, "]`",sep=""))))
}
##### Data ###
N = 30
p = 3
p_eff = 3
X = matrix(rnorm(N*p),N)
beta = rep(0,p)
beta[1:p_eff] = c(1:p_eff)*3
Z = rnorm(N, X%*%beta,1)
# beta
d= eigen(t(X)%*%X)$values[1] + 1
# d = 128
n
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.9,p)))
ss_fit <- sampling(ss_model, data = toy_dat,init=init,iter = 1000, chains = 1)
extractPosterior<-function(varname, dimen, stan_fit){
sapply(c(1:dimen), function(i)  eval(parse(text=paste(stan_fit,"@sim$samples[[1]]$`",varname,"[",i, "]`",sep=""))))
}
##### Data ###
N = 30
p = 3
p_eff = 3
X = matrix(rnorm(N*p),N)
beta = rep(0,p)
beta[1:p_eff] = c(1:p_eff)*3
Z = rnorm(N, X%*%beta,1)
# beta
d= eigen(t(X)%*%X)$values[1] + 1
# d = 128
n
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.9,p)))
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.9,p)))
ss_fit <- sampling(ss_model, data = toy_dat,init=init,iter = 1000, chains = 1)
ss_fit <- sampling(ss_model, data = toy_dat,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
##### Data ###
N = 100
p = 3
p_eff = 3
X = matrix(rnorm(N*p),N)
beta = rep(0,p)
beta[1:p_eff] = c(1:p_eff)*3
Z = rnorm(N, X%*%beta,1)
# beta
d= eigen(t(X)%*%X)$values[1] + 1
# d = 128
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.9,p)))
ss_fit <- sampling(ss_model, data = toy_dat,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
##### Data ###
N = 100
p = 3
p_eff = 3
X = matrix(rnorm(N*p),N)
beta = rep(0,p)
beta[1:p_eff] = c(1:p_eff)*3
Z = rnorm(N, X%*%beta,1)
# beta
d= eigen(t(X)%*%X)$values[1] + 1
# d = 128
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.9,p)))
ss_fit <- sampling(ss_model, data = toy_dat,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
##### Data ###
N = 100
p = 3
p_eff = 3
X = matrix(rnorm(N*p),N)
beta = rep(0,p)
beta[1:p_eff] = c(1:p_eff)*3
Z = rnorm(N, X%*%beta,1)
# beta
d= eigen(t(X)%*%X)$values[1] + 1
# d = 128
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.9,p)))
ss_fit <- sampling(ss_model, data = toy_dat,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
##### Data ###
N = 100
p = 3
p_eff = 3
X = matrix(rnorm(N*p),N)
beta = rep(0,p)
beta[1:p_eff] = c(1:p_eff)*3
Z = rnorm(N, X%*%beta,1)
# beta
d= eigen(t(X)%*%X)$values[1] + 1
# d = 128
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.9,p)))
ss_fit <- sampling(ss_model, data = toy_dat,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
includ_prob<- extractPosterior("includ_prob", p,"ss_fit")
plot(colMeans(includ_prob))
ts.plot(includ_prob)
prob<- extractPosterior("prob", p,"ss_fit")
plot(colMeans(prob))
ts.plot(includ_prob)
acf(post_beta[,1:5])
require("monomvn")
hs_fit= blasso(X,Z, case="hs")
plot(colMeans(hs_fit$beta))
hs_fit= blasso(X,Z, case="hs")
plot(colMeans(hs_fit$beta))
##### Data ###
N = 100
p = 3
p_eff = 3
X = matrix(rnorm(N*p),N)
beta = rep(0,p)
beta[1:p_eff] = c(1:p_eff)*3
Z = rnorm(N, X%*%beta,1)
# beta
d= eigen(t(X)%*%X)$values[1] + 1
# d = 128
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.9,p)))
ss_fit <- sampling(ss_model, data = toy_dat,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
includ_prob<- extractPosterior("includ_prob", p,"ss_fit")
plot(colMeans(includ_prob))
ts.plot(includ_prob)
prob<- extractPosterior("prob", p,"ss_fit")
plot(colMeans(prob))
ts.plot(includ_prob)
acf(post_beta[,1:5])
#
require("monomvn")
hs_fit= blasso(X,Z, case="hs")
plot(colMeans(hs_fit$beta))
##### Data ###
N = 100
p = 3
p_eff = 3
X = matrix(rnorm(N*p),N)
beta = rep(0,p)
beta[1:p_eff] = c(1:p_eff)*3
Z = rnorm(N, X%*%beta,1)
# beta
d= eigen(t(X)%*%X)$values[1] + 1
# d = 128
beta0 = c(solve( t(X)%*%X + diag(0.1,p), t(X)%*%Z))
toy_dat <- list(N=N, p=p, X=X,Z=Z, d=d)
init<- list(list(beta= beta0, y=rnorm(p),prob= rep(0.9,p)))
ss_fit <- sampling(ss_model, data = toy_dat,iter = 1000, chains = 1)
post_beta<- extractPosterior("beta", p,"ss_fit")
ts.plot(post_beta[,1:3])
colMeans(post_beta[,1:3])
beta
includ_prob<- extractPosterior("includ_prob", p,"ss_fit")
plot(colMeans(includ_prob))
ts.plot(includ_prob)
prob<- extractPosterior("prob", p,"ss_fit")
plot(colMeans(prob))
ts.plot(includ_prob)
acf(post_beta[,1:5])
#
require("monomvn")
hs_fit= blasso(X,Z, case="hs")
plot(colMeans(hs_fit$beta))
